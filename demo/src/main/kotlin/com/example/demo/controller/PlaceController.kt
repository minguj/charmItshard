package com.example.demo.controller

import com.example.demo.util.TextUtils
import com.example.demo.util.TextUtils.convertTMToWGS84
import com.example.demo.util.TextUtils.calculateDistance

import com.example.demo.entity.PlaceEntity
import com.example.demo.entity.AddressTEntity
import com.example.demo.entity.CategoryEntity
import com.example.demo.entity.NeedInfoEntity

import com.example.demo.repository.PlaceRepository
import com.example.demo.repository.AddressTRepository
import com.example.demo.repository.CategoryRepository
import com.example.demo.repository.NeedInfoRepository

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import org.springframework.web.client.RestTemplate
import org.springframework.web.util.UriComponentsBuilder
import java.net.URLEncoder

import org.springframework.data.domain.Page
import org.springframework.data.domain.PageRequest
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController

import com.microsoft.playwright.BrowserType
import com.microsoft.playwright.Playwright
import net.andreinc.mockneat.unit.user.Users

import org.jsoup.Jsoup
import org.jsoup.Connection
import kotlin.random.Random
import kotlin.text.toDouble
import kotlin.text.toDoubleOrNull
import org.jsoup.nodes.Document
import java.io.IOException
import java.util.regex.Pattern
import java.lang.Thread.sleep
import net.datafaker.Faker

import io.github.cdimascio.dotenv.dotenv
val dotenv = dotenv()
val naverClientId = dotenv["NAVER_CLIENT_ID"]
val naverClientSecret = dotenv["NAVER_CLIENT_SECRET"]
val openApiSubwayUrl = dotenv["OPENAPI_SUBWAY_URL"]

@RestController
@RequestMapping("/api")
class PlaceController (
    private val placeRepository: PlaceRepository,
    private val addressTRepository: AddressTRepository,
    private val categoryRepository: CategoryRepository,
    private val needInfoRepository: NeedInfoRepository
) {
    private val faker = Faker()

    // ‚úÖ Ï†ÄÏû•Îêú Ïû•ÏÜå Î™©Î°ù Ï°∞Ìöå API (ÌïÑÌÑ∞ÎßÅ Í∏∞Îä• Ï∂îÍ∞Ä)
    @GetMapping("/places")
    fun getAllPlaces(
        @RequestParam(defaultValue = "0") page: Int,
        @RequestParam(defaultValue = "5") size: Int,
        @RequestParam(required = false) category: String?,
        @RequestParam(required = false) city: String?,
        @RequestParam(required = false) district: String?,
        @RequestParam(required = false) searchTerm: String?,
        @RequestParam(required = false) subway: String?,
    ): Page<PlaceEntity> {
        val pageable = PageRequest.of(page, size)
        return placeRepository.findByFilters(category, city, district, searchTerm, subway, pageable)
    }

    @PostMapping("/savePlace")
    fun savePlace(@RequestBody request: PlaceRequest): ResponseEntity<String> {
        val placeDesc = request.placeDesc?.joinToString(",") ?: ""

        // ‚úÖ ÏΩúÌÇ§ÏßÄ Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏ (placeDesc + request.placeInfo Î™®Îëê Ï≤¥ÌÅ¨)
        val isCorkageAvailable = listOf("ÏΩúÌÇ§ÏßÄ", "corkage", "Î≥ëÏûÖÎ£å", "Ï£ºÎ•òÎ∞òÏûÖ")
            .any { keyword -> 
                placeDesc.contains(keyword) && 
                !listOf("Ï£ºÎ•òÎ∞òÏûÖ Í∏àÏßÄ", "Ï£ºÎ•òÎ∞òÏûÖÍ∏àÏßÄ").any { noKeyword -> 
                    placeDesc.contains(noKeyword) 
                }
            } || request.placeInfo.contains("ÏΩúÌÇ§ÏßÄ Í∞ÄÎä•")

        // ‚úÖ Î¨¥Î£å ÏΩúÌÇ§ÏßÄ Ïó¨Î∂Ä ÌôïÏù∏ (placeDesc + request.placeInfo Î™®Îëê Ï≤¥ÌÅ¨)
        val isFreeCorkage = listOf("ÏΩúÌÇ§ÏßÄ Î¨¥Î£å", "ÏΩúÌÇ§ÏßÄÎ¨¥Î£å", "ÏΩúÌÇ§ÏßÄÌîÑÎ¶¨", "ÏΩúÌÇ§ÏßÄ ÌîÑÎ¶¨", "Î¨¥Î£å", "ÌîÑÎ¶¨")
            .any { keyword -> 
                placeDesc.contains(keyword) 
            } || request.placeInfo.contains("Î¨¥Î£å")

        val cleanTitle = Jsoup.parse(request.place.title).text()   

        val (placemapx, placemapy) = convertTMToWGS84(request.place.mapx?.toDouble() ?: 0.0, request.place.mapy?.toDouble() ?: 0.0)
        val existingPlace = placeRepository.findByTitleAndAddress(cleanTitle, request.place.address ?: "")
        
        // ‚úÖ Ïô∏Î∂Ä ÏßÄÌïòÏ≤† API Ìò∏Ï∂ú
        val subwayInfo = getNearestSubwayInfo(placemapy, placemapx) ?: emptyList()

        val formattedSubList = subwayInfo.map { station ->  
            val stationName = station["station_name"]?.toString() ?: "Unknown"
            val lineName = station["line_name"]?.toString() ?: "Unknown"
            val distance = (station["distance_m"] as? Double)?.toInt() ?: 0
            "[$stationName,$lineName,${distance}m]"
        }.joinToString(",")
        println("üîç Î≥ÄÌôòÎêú Î¶¨Ïä§Ìä∏: $formattedSubList")

        val placeEntity = PlaceEntity(
            id = existingPlace?.id,
            title = cleanTitle,
            link = request.place.link,
            category = request.place.category,
            description = request.place.description,
            telephone = request.place.telephone,
            address = request.place.address,
            roadAddress = request.place.roadAddress,
            mapx = request.place.mapx,
            mapy = request.place.mapy,
            placeUrl = request.placeUrl, // üî• placeUrl Ï†ÄÏû•
            corkageAvailable = isCorkageAvailable,
            freeCorkage = isFreeCorkage,
            placeInfo = request.placeInfo.joinToString(","), // Î¶¨Ïä§Ìä∏Î•º Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
            corkageInfolist = placeDesc,
            nearbySubways = formattedSubList
        )

        return if (existingPlace != null) {
            // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏóÖÎç∞Ïù¥Ìä∏
            val savedEntity = placeRepository.save(placeEntity)
            ResponseEntity.ok(savedEntity.id.toString())

        } else {
            // ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
            val savedEntity = placeRepository.save(placeEntity)
    
            // addressT ÌÖåÏù¥Î∏îÏóê ÏßÄÏó≠/Íµ¨ Ï†ïÎ≥¥ Ï†ÄÏû•
            val addressTokens = request.place.address?.split(" ") ?: emptyList()
            if (addressTokens.size >= 2) {
                val region = addressTokens[0]
                val subregion = addressTokens[1]
                if (!addressTRepository.existsByRegionAndSubregion(region, subregion)) {
                    addressTRepository.save(AddressTEntity(region = region, subregion = subregion))
                }
            }
    
            // category ÌÖåÏù¥Î∏îÏóê Ï§ëÎ≥µ ÏóÜÏù¥ Ï†ÄÏû•
            val categoryTokens = request.place.category?.split(">") ?: emptyList()
            if (categoryTokens.size > 1) {
                val mainCategory = categoryTokens[1].trim()
                if (!categoryRepository.existsByName(mainCategory)) {
                    categoryRepository.save(CategoryEntity(name = mainCategory))
                }
            }
    
            ResponseEntity.ok(savedEntity.id.toString())
        }
    }
    
    @GetMapping("/search")
    fun searchPlaces(@RequestParam query: String, @RequestParam page: Int?): ResponseEntity<Any> {
        val display = 5
        val start = ((page ?: 1) - 1) * display + 1

        val uri = "https://openapi.naver.com/v1/search/local.json?query=$query&display=$display"
        val headers = org.springframework.http.HttpHeaders().apply {
            set("X-Naver-Client-Id", naverClientId)
            set("X-Naver-Client-Secret", naverClientSecret)
        }

        val requestEntity = org.springframework.http.HttpEntity<String>(headers)
        val response = RestTemplate().exchange(uri, org.springframework.http.HttpMethod.GET, requestEntity, Map::class.java)

        println("üîç Ìó§Îçî: $headers")
        println("üîç ÏµúÏ¢Ö ÏöîÏ≤≠ URI: $uri")
        println("üîç ÏùëÎãµ Îç∞Ïù¥ÌÑ∞: ${response.body}")

        val isLastPage = (start + display > (response.body?.get("total") as Int))
        return ResponseEntity.ok(mapOf("results" to response.body?.get("items"), "isLastPage" to isLastPage))
    }   

    private fun getNearestSubwayInfo(mapx: Double, mapy: Double): List<Map<String, Any>> {
        val response = RestTemplate().getForObject(openApiSubwayUrl, Map::class.java) as Map<String, Any>
    
        val subwayData = (response["subwayStationMaster"] as? Map<*, *>)?.get("row") as? List<Map<String, Any>> ?: emptyList()
    
        // 500m Ïù¥ÎÇ¥ Ïó≠ ÌïÑÌÑ∞ÎßÅ
        val nearbyStations = subwayData.mapNotNull { subway ->
            val yPoint = (subway["LAT"] as? String)?.toDoubleOrNull() ?: return@mapNotNull null
            val xPoint = (subway["LOT"] as? String)?.toDoubleOrNull() ?: return@mapNotNull null
            val distance = calculateDistance(mapy, mapx, yPoint, xPoint)
    
            if (distance <= 800) {
                mapOf(
                    "station_name" to (subway["BLDN_NM"]?.toString() ?: "Unknown Station"),
                    "line_name" to (subway["ROUTE"]?.toString() ?: "Unknown Line"),
                    "distance_m" to distance
                )
            } else {
                null
            }
        }
        .distinctBy { it["station_name"]}
        .sortedBy { it["distance_m"] as Double }

        return nearbyStations
    }
}

data class PlaceRequest(
    val place: PlaceData,
    val placeInfo: List<String>,
    val placeUrl: String,
    val placeDesc: List<String>?
)

data class PlaceData(
    val title: String,
    val link: String?,
    val category: String?,
    val description: String?,
    val telephone: String?,
    val address: String?,
    val roadAddress: String?,
    val mapx: String?,
    val mapy: String?
)
